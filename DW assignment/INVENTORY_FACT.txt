-- =============================================
-- INVENTORY_FACT
-- =============================================
DROP TABLE INVENTORY_FACT CASCADE CONSTRAINTS;

CREATE TABLE INVENTORY_FACT
(
    date_key             NUMBER NOT NULL,
    book_key             NUMBER NOT NULL,
    staff_key            NUMBER NOT NULL,
    member_key           NUMBER NOT NULL,
    supplier_key         NUMBER NOT NULL,
    quantityChange       NUMBER,
    purchaseUnitCost     NUMBER(10,2),
    purchaseTotalCost    NUMBER(12,2),
    transactionTypeCode  VARCHAR2(20),
    loanID               VARCHAR2(10),
    orderID              VARCHAR2(10),
    purchaseID           VARCHAR2(10),
    CONSTRAINT IF_DATE_FK     FOREIGN KEY(date_key)      REFERENCES DATE_DIM(date_key),
    CONSTRAINT IF_BOOK_FK     FOREIGN KEY(book_key)      REFERENCES BOOK_DIM(book_key),
    CONSTRAINT IF_STAFF_FK    FOREIGN KEY(staff_key)     REFERENCES STAFF_DIM(staff_key),
    CONSTRAINT IF_MEMBER_FK   FOREIGN KEY(member_key)    REFERENCES MEMBER_DIM(member_key),
    CONSTRAINT IF_SUPPLIER_FK FOREIGN KEY(supplier_key)  REFERENCES SUPPLIER_DIM(supplier_key),
    CONSTRAINT INVENTORY_FACT_PK PRIMARY KEY(date_key, book_key, staff_key, member_key, supplier_key)
);

-- =============================================
-- ETL: INVENTORY_FACT
-- =============================================

-- PURCHASE (+ qty)
INSERT INTO INVENTORY_FACT
SELECT D.date_key,
       B.book_key,
       S.staff_key,
       0 AS member_key,   -- placeholder when member not involved
       SUP.supplier_key,
       P.purchaseQty AS quantityChange,
       P.purchaseUnitCost AS purchaseUnitCost,
       (P.purchaseQty * P.purchaseUnitCost) AS purchaseTotalCost,
       'PURCHASE' AS transactionTypeCode,
       NULL AS loanID,
       NULL AS orderID,
       P.purchaseID
FROM PURCHASE P
JOIN DATE_DIM D ON P.purchaseDate = D.cal_date
JOIN BOOK_DIM B ON P.bookID = B.bookID
JOIN STAFF_DIM S ON P.staffID = S.staffID
JOIN SUPPLIER_DIM SUP ON P.supplierID = SUP.supplierID;

-- LOAN_OUT (-1 qty)
INSERT INTO INVENTORY_FACT
SELECT D.date_key,
       B.book_key,
       S.staff_key,
       M.member_key,
       0 AS supplier_key, -- placeholder when supplier not involved
       -1 AS quantityChange,
       NULL AS purchaseUnitCost,
       NULL AS purchaseTotalCost,
       'LOAN_OUT' AS transactionTypeCode,
       L.loanID,
       NULL AS orderID,
       NULL AS purchaseID
FROM LOAN L
JOIN LOAN_DETAILS LD ON L.loanID = LD.loanID
JOIN DATE_DIM D ON L.loanDate = D.cal_date
JOIN BOOK_DIM B ON LD.copyID = B.copyID
JOIN STAFF_DIM S ON L.staffID = S.staffID
JOIN MEMBER_DIM M ON L.memberID = M.memberID;

-- LOAN_RETURN (+1 qty)
INSERT INTO INVENTORY_FACT
SELECT D.date_key,
       B.book_key,
       S.staff_key,
       M.member_key,
       0 AS supplier_key,
       1 AS quantityChange,
       NULL AS purchaseUnitCost,
       NULL AS purchaseTotalCost,
       'LOAN_RETURN' AS transactionTypeCode,
       L.loanID,
       NULL AS orderID,
       NULL AS purchaseID
FROM LOAN L
JOIN LOAN_DETAILS LD ON L.loanID = LD.loanID
JOIN DATE_DIM D ON LD.returnDate = D.cal_date
JOIN BOOK_DIM B ON LD.copyID = B.bookID
JOIN STAFF_DIM S ON L.staffID = S.staffID
JOIN MEMBER_DIM M ON L.memberID = M.memberID;

COMMIT;

