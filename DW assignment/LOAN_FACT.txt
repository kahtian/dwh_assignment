-- =============================================
-- LOAN_FACT
-- =============================================
DROP TABLE LOAN_FACT CASCADE CONSTRAINTS;

CREATE TABLE LOAN_FACT
(
    MEMBER_KEY         NUMBER NOT NULL,
    BOOK_KEY           NUMBER NOT NULL,
    STAFF_KEY          NUMBER NOT NULL,
    LOAN_DATE_KEY      NUMBER,
    DUE_DATE_KEY       NUMBER,
    RETURN_DATE_KEY    NUMBER,
    LOAN_DURATION_DAYS NUMBER,
    OVERDUE_DAYS       NUMBER,
    FINE_AMT_BILLED    NUMBER(8,2),
    FINE_PAID_FLAG     NUMBER(1),
    LOANID             VARCHAR2(10), -- changed from NUMBER
    CONSTRAINT LF_MEMBER_FK FOREIGN KEY(MEMBER_KEY) REFERENCES MEMBER_DIM(MEMBER_KEY),
    CONSTRAINT LF_BOOK_FK FOREIGN KEY(BOOK_KEY) REFERENCES BOOK_DIM(BOOK_KEY),
    CONSTRAINT LF_STAFF_FK FOREIGN KEY(STAFF_KEY) REFERENCES STAFF_DIM(STAFF_KEY)
);

-- =============================================
-- ETL: LOAN_FACT
-- =============================================
INSERT INTO LOAN_FACT
SELECT M.MEMBER_KEY,
       B.BOOK_KEY,
       S.STAFF_KEY,
       D1.DATE_KEY,
       D2.DATE_KEY,
       D3.DATE_KEY,
       (LD.RETURNDATE - L.LOANDATE),
       CASE WHEN LD.RETURNDATE > LD.DUEDATE 
            THEN (LD.RETURNDATE - LD.DUEDATE) ELSE 0 END,
       NVL(SUM(F.FINEAMT),0),
       CASE WHEN MAX(F.FINESTATUS)='PAID' THEN 1 ELSE 0 END,
       L.LOANID
FROM LOAN L
JOIN LOAN_DETAILS LD 
     ON L.LOANID = LD.LOANID
LEFT JOIN FINE F 
     ON LD.LOANID = F.LOANID 
    AND LD.COPYID = F.COPYID
JOIN DATE_DIM D1 
     ON L.LOANDATE = D1.CAL_DATE
JOIN DATE_DIM D2 
     ON LD.DUEDATE = D2.CAL_DATE
LEFT JOIN DATE_DIM D3 
     ON LD.RETURNDATE = D3.CAL_DATE
JOIN MEMBER_DIM M 
     ON L.MEMBERID = M.MEMBERID
JOIN STAFF_DIM S 
     ON L.STAFFID = S.STAFFID
JOIN BOOK_DIM B 
     ON LD.COPYID = B.COPYID
GROUP BY L.LOANID, LD.COPYID, L.LOANDATE, LD.DUEDATE, LD.RETURNDATE,
         M.MEMBER_KEY, B.BOOK_KEY, S.STAFF_KEY, 
         D1.DATE_KEY, D2.DATE_KEY, D3.DATE_KEY;

COMMIT;
