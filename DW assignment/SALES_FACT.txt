-- =============================================
-- SALES_FACT
-- =============================================
DROP TABLE SALES_FACT CASCADE CONSTRAINTS;

CREATE TABLE SALES_FACT
(
    ORDER_DATE_KEY    NUMBER NOT NULL,
    MEMBER_KEY        NUMBER NOT NULL,
    BOOK_KEY          NUMBER NOT NULL,
    STAFF_KEY         NUMBER NOT NULL,
    ORDERQTY          NUMBER,
    ORDERUNITPRICE    NUMBER(10,2),
    ORDERTOTALPRICE   NUMBER(12,2),
    PURCHASEUNITCOST  NUMBER(10,2),
    PROFIT            NUMBER(12,2),
    ORDERID           VARCHAR2(6),  -- fixed: was NUMBER
    CONSTRAINT SF_DATE_FK FOREIGN KEY(ORDER_DATE_KEY) REFERENCES DATE_DIM(DATE_KEY),
    CONSTRAINT SF_MEMBER_FK FOREIGN KEY(MEMBER_KEY) REFERENCES MEMBER_DIM(MEMBER_KEY),
    CONSTRAINT SF_BOOK_FK FOREIGN KEY(BOOK_KEY) REFERENCES BOOK_DIM(BOOK_KEY),
    CONSTRAINT SF_STAFF_FK FOREIGN KEY(STAFF_KEY) REFERENCES STAFF_DIM(STAFF_KEY)
);

-- =============================================
-- ETL: SALES_FACT
-- =============================================
INSERT INTO SALES_FACT
SELECT D.DATE_KEY,
       M.MEMBER_KEY,
       B.BOOK_KEY,
       S.STAFF_KEY,
       OD.ORDERQTY,
       OD.ORDERUNITPRICE,
       (OD.ORDERQTY * OD.ORDERUNITPRICE),
       NVL(P.MIN_UNITCOST, 0),  -- take cost from purchase (if available)
       (OD.ORDERQTY * OD.ORDERUNITPRICE) - (OD.ORDERQTY * NVL(P.MIN_UNITCOST, 0)),
       O.ORDERID
FROM ORDER_DETAILS OD
JOIN ORDERS O 
     ON OD.ORDERID = O.ORDERID
JOIN DATE_DIM D 
     ON O.ORDERDATE = D.CAL_DATE
JOIN MEMBER_DIM M 
     ON O.MEMBERID = M.MEMBERID
JOIN STAFF_DIM S 
     ON O.STAFFID = S.STAFFID
JOIN BOOK_DIM B 
     ON OD.BOOKID = B.BOOKID
LEFT JOIN (
      SELECT BOOKID, MIN(PURCHASEUNITCOST) AS MIN_UNITCOST
      FROM PURCHASE
      GROUP BY BOOKID
) P
     ON OD.BOOKID = P.BOOKID;

COMMIT;
